#! /bin/bash
# Programming and idea by : Mohammad Hossein Salehinezhad
# Gitbub : https://github.com/mrunix1998/Openldap-over-SSL-TLS
# Email : salehimohammad331@gmail.com
# License : GPL v2.0
# Last update : Wed, 16 Mar 2022 15:56:06 +0330
# openldap.installer v1.0.0
# DO NOT USE THIS SCRIPT IN PRODUCTION ENVIRONMENT BEFORE READING LINE BY LINE
# --------------------------------------------------------------------------------------------------------------------------------------------------------- #
# SUCCESSFULLY TESTED IN UBUNTU 20.04 [FOCAL]
# SUCCESSFULLY TESTED IN UBUNTU 18.04 [BIONIC]
# SUCCESSFULLY TESTED IN UBUNTU 16.04 [XENIAL]
# --------------------------------------------------------------------------------------------------------------------------------------------------------- #



# CHECK CONFIG FILE EXIST OR NOT # ------------------------------------------------------------------------------------------------------------------------ #
[ ! -f openldap.installer.conf ] && echo "cannot access 'openldap.installer.conf': No such file or directory" && exit 1
# --------------------------------------------------------------------------------------------------------------------------------------------------------- #



# READ CONFIG FILE VARIABLES # ---------------------------------------------------------------------------------------------------------------------------- #
source openldap.sslinstaller.conf
# --------------------------------------------------------------------------------------------------------------------------------------------------------- #



function usage {
    # PRINT USAGE IN TERMINAL # --------------------------------------------------------------------------------------------------------------------------- #
    echo '[00] [Build image for docker]                               bash openldap.server.installer.sh docker-build'
    echo '[>>]'
    echo '[01] [Install and Configure openldap]                       bash openldap.server.installer.sh install'
    echo '[>>]'
    echo '[02] [View all users]                                       bash openldap.server.installer.sh list_user'
    echo '[03] [View all groups]                                      bash openldap.server.installer.sh list_group'
    echo '[04] [Remove all sudo roles (access and except)]            bash openldap.server.installer.sh remove_sudo_roles'
    echo '[>>]'
    echo '[05] [Create normal user]                                   bash openldap.server.installer.sh create_user  <USERNAME> <PASSWORD> <GROUPNAME>'
    echo '[>>] [For example]                                          bash openldap.server.installer.sh create_user  iman a devops'
    echo '[>>]'
    echo '[06] [Delete normal user]                                   bash openldap.server.installer.sh delete_user  <USERNAME>'
    echo '[>>] [For example]                                          bash openldap.server.installer.sh delete_user  iman'
    echo '[>>]'
    echo '[07] [Create normal group]                                  bash openldap.server.installer.sh create_group <GROUPNAME>'
    echo '[>>] [For example]                                          bash openldap.server.installer.sh create_group developers'
    echo '[>>]'
    echo '[08] [Delete normal group]                                  bash openldap.server.installer.sh delete_group <GROUPNAME>'
    echo '[>>] [For example]                                          bash openldap.server.installer.sh delete_group developers'
    echo '[>>]'
    echo '[09] [Add user to sudoer group]                             bash openldap.server.installer.sh enable_sudo  <sudo mode> <USERNAME>'
    echo '[>>] [For example]                                          bash openldap.server.installer.sh enable_sudo except iman'
    echo '[>>]'
    echo '[10] [Remove user from sudoer group]                        bash openldap.server.installer.sh disable_sudo <sudo mode> <USERNAME>'
    echo '[>>] [For example]                                          bash openldap.server.installer.sh disable_sudo access iman'
    echo '[>>]'
    echo '[11] [User have no access to sudo except somes commands]    bash openldap.server.installer.sh sudo_roles except except.list'
    echo '[>>]'
    echo '[12] [User have full access to sudo except somes commands]  bash openldap.server.installer.sh sudo_roles access access.list'
    echo '[>>]'
    echo '[>>] [Connecting OpenLdap to Active Directory using saslauthd] bash openldap.server.installer.sh sasl'

    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #
}



function check_slapd_package {

    # CHECK OPENLDAP INSTALLED IN SYSTEM OT NOT # --------------------------------------------------------------------------------------------------------- #
    dpkg -S slapd &> /dev/null
    [ "$?" != "0" ] && echo '[-] Please install openldap first' && exit 1
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

}



function load_dc {

    # CREATE DISTINGUISHED NAME # ------------------------------------------------------------------------------------------------------------------------- #
    for name in $(echo "$openldap_domain" | tr '.' '\n') ; do
        if [ -z "$dc" ] ; then
            dc=$(echo "dc=$name")
        else
            dc=$(echo "$dc,dc=$name")
        fi
    done
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

}


function docker-build {

    [ ! -f Dockerfile ] && echo "cannot access 'Dockerfile': No such file or directory" && exit 1

    docker rm --force openldap

    docker images | grep -v 'REPOSITORY' | tr -s ' ' | grep 'openldap installer' &> /dev/null
    if [ "$?" = "0" ] ; then
        image_id=$(docker images | grep -v 'REPOSITORY' | tr -s ' ' | grep 'openldap installer' | cut -d ' ' -f 3)
        docker rmi --force $image_id
    fi
    docker build -t openldap:installer .

    docker create -it -p 389:389 --privileged --cap-add SYS_ADMIN -v /sys/fs/cgroup:/sys/fs/cgroup:ro --name openldap --hostname $openldap_domain openldap:installer
    docker start openldap
}


function sasl {
    apt-get update
    apt-get install -y sasl2-bin
    systemctl stop saslauthd

    echo 'START=yes' > /etc/default/saslauthd
    echo 'DESC="SASL Authentication Daemon"' >> /etc/default/saslauthd
    echo 'NAME="saslauthd"' >> /etc/default/saslauthd
    echo 'MECHANISMS="ldap"' >> /etc/default/saslauthd
    echo 'MECH_OPTIONS="/etc/saslauthd.conf"' >> /etc/default/saslauthd
    echo 'THREADS=5' >> /etc/default/saslauthd
    echo 'OPTIONS="-c -m /var/run/saslauthd"' >> /etc/default/saslauthd





    testsaslauthd -d "$user" -p "$pass"
    if [ "$?" = "0" ] ; then
        echo
    else
        echo
    fi

    touch /usr/lib/sasl2/slapd.conf


    usermod -a -G sasl openldap



    systemctl restart saslauthd slapd
}


function list_user {

    # FIND ALL OPENLDAP USER # ---------------------------------------------------------------------------------------------------------------------------- #
    slapcat | grep ou=people | grep 'uid' | column -s ',' -t
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

}



function list_group {

    # FIND ALL OPENLDAP GROUP # --------------------------------------------------------------------------------------------------------------------------- #
    slapcat | grep ou=groups | grep 'cn=' | column -s ',' -t
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

}



function create_group {

    # CHECK GROUP NAME EXIST OR NOT # --------------------------------------------------------------------------------------------------------------------- #
    slapcat | grep -i "$group_name" | grep groups &> /dev/null
    [ "$?" = "0" ] && echo "[-] $group_name group exist" && exit 1
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    # CREATE gidNumber NUMBER # --------------------------------------------------------------------------------------------------------------------------- #
    gidNumber=$(slapcat | grep gidNumber | cut -d ':' -f 2 | tr -d ' ' | tail -n 1)
    [ -z "$gidNumber" ] && gidNumber='2000' || gidNumber=$(echo "$gidNumber + 1" | bc)
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    # CREATE LDIF FILE # ---------------------------------------------------------------------------------------------------------------------------------- #
    echo -e "dn: cn=$group_name,ou=groups,$dc"         > create_group.ldif
    echo -e "objectClass: posixGroup"                 >> create_group.ldif
    echo -e "cn: $group_name"                         >> create_group.ldif
    echo -e "gidNumber: $gidNumber"                   >> create_group.ldif
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    # LOAD LDAP FILE IN OPENLDAP # ------------------------------------------------------------------------------------------------------------------------ #
    ldapadd -x -D cn=$openldap_admin_user,$dc -w "$openldap_admin_pass" -f create_group.ldif
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    # REMOVE OLD FILES # ---------------------------------------------------------------------------------------------------------------------------------- #
    rm -rf create_group.ldif &> /dev/null
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

}



function delete_group {

    # CREATE LDIF FILE # ---------------------------------------------------------------------------------------------------------------------------------- #
    echo "dn: cn=$group_name,ou=groups,$dc" > delete_group.ldif
    echo "changetype: delete"              >> delete_group.ldif
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    # LOAD LDIF FILE TO REMOVE GROUP # -------------------------------------------------------------------------------------------------------------------- #
    ldapmodify -x -D cn=$openldap_admin_user,$dc -w "$openldap_admin_pass" -H ldap://$openldap_domain -f delete_group.ldif
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    # REMOVE OLD LDIF FILE # ------------------------------------------------------------------------------------------------------------------------------ #
    rm -rf delete_group.ldif &> /dev/null
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

}



function create_user {

    # CHECK USERNAME EXIST OR NOT # ----------------------------------------------------------------------------------------------------------------------- #
    slapcat | grep -i "$user_name" | grep people &> /dev/null
    [ "$?" = "0" ] && echo "[-] $user_name username exist" && exit 1
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    # CREATE uidNumber NUMBER # --------------------------------------------------------------------------------------------------------------------------- #
    uidNumber=$(slapcat | grep uidNumber | cut -d ':' -f 2 | tr -d ' ' | tail -n 1)
    [ -z "$uidNumber" ] && uidNumber='2000' || uidNumber=$(echo "$uidNumber + 1" | bc)
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    # FIND gidNumber FOR GROUPNAME # ---------------------------------------------------------------------------------------------------------------------- #
    gidNumber=$(slapcat | grep -i "$group_name" -A 1 | grep gidNumber | cut -d ':' -f 2 | tr -d ' ')
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    # CHECK gidNumber IS EMPTY OR NOT # ------------------------------------------------------------------------------------------------------------------- #
    [ -z "$gidNumber" ] && echo -e "[-] $group_name does not exist, Please create it first" && exit 1
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    # CREATE PASSWORD HASH # ---------------------------------------------------------------------------------------------------------------------------------- #
    user_password_hash=$(slappasswd -s "$user_password")
    # --------------------------------------------------------------------------------------------------------------------------------------------------------- #

    # CREATE LDIF FILE # ---------------------------------------------------------------------------------------------------------------------------------- #
    echo -e "dn: uid=$user_name,ou=people,$dc"          > create_user.ldif
    echo -e "objectClass: inetOrgPerson"               >> create_user.ldif
    echo -e "objectClass: posixAccount"                >> create_user.ldif
    echo -e "objectClass: shadowAccount"               >> create_user.ldif
    echo -e "cn: $user_name"                           >> create_user.ldif
    echo -e "sn: $user_name"                           >> create_user.ldif
    echo -e "userPassword: $user_password_hash"        >> create_user.ldif
    echo -e "loginShell: /bin/bash"                    >> create_user.ldif
    echo -e "uidNumber: $uidNumber"                    >> create_user.ldif
    echo -e "gidNumber: $gidNumber"                    >> create_user.ldif
    echo -e "homeDirectory: /home/$user_name"          >> create_user.ldif
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    # LOAD LDAP FILE IN OPENLDAP # ------------------------------------------------------------------------------------------------------------------------ #
    ldapadd -x -D cn=$openldap_admin_user,$dc -w "$openldap_admin_pass" -f create_user.ldif
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    # REMOVE OLD LDIF FILE # ------------------------------------------------------------------------------------------------------------------------------ #
    rm -rf create_user.ldif &> /dev/null
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

}



function delete_user {

    # CRETE LDIF FILE TO REMOVE USER # -------------------------------------------------------------------------------------------------------------------- #
    echo "dn: uid=$user_name,ou=people,$dc" > delete_user.ldif
    echo "changetype: delete"              >> delete_user.ldif
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    # LOAD LDIF FILE IN OPENLDAP # ------------------------------------------------------------------------------------------------------------------------ #
    ldapmodify -x -D cn=$openldap_admin_user,$dc -w "$openldap_admin_pass" -H ldap://$openldap_domain -f delete_user.ldif
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    # REMOVE OLD LDIF FILE # ------------------------------------------------------------------------------------------------------------------------------ #
    rm -rf delete_user.ldif &> /dev/null
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

}



function enable_sudo {

    # CREATE LDIF FILE # ---------------------------------------------------------------------------------------------------------------------------------- #
    echo -e "dn: cn=$mode,ou=SUDOers,$dc"        > enable_sudo.ldif
    echo -e "changetype: modify"                >> enable_sudo.ldif
    echo -e "add: sudoUser"                     >> enable_sudo.ldif
    echo -e "sudoUser: $user_name"              >> enable_sudo.ldif
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    # LOAD LDAP FILE IN OPENLDAP # ------------------------------------------------------------------------------------------------------------------------ #
    ldapmodify -f enable_sudo.ldif -H ldap://$openldap_domain -D cn=$openldap_admin_user,$dc -w "$openldap_admin_pass" -x
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    # REMOVE OLD LDIF FILE # ------------------------------------------------------------------------------------------------------------------------------ #
    rm -rf enable_sudo.ldif &> /dev/null
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

}



function disable_sudo {

    # CREATE LDIF FILE TO ADD USER IN SUDO GROUP # -------------------------------------------------------------------------------------------------------- #
    echo -e "dn: cn=$mode,ou=SUDOers,$dc"                  > disable_sudo.ldif
    echo -e "changetype: modify"                          >> disable_sudo.ldif
    echo -e "delete: sudoUser"                            >> disable_sudo.ldif
    echo -e "sudoUser: $user_name"                        >> disable_sudo.ldif
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    # LOAD LDAP FILE IN OPENLDAP # ------------------------------------------------------------------------------------------------------------------------ #
    ldapmodify -f disable_sudo.ldif -H ldap://$openldap_domain -D cn=$openldap_admin_user,$dc -w "$openldap_admin_pass" -x
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    # REMOVE OLD LDIF FILE # ------------------------------------------------------------------------------------------------------------------------------ #
    rm -rf disable_sudo.ldif &> /dev/null
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

}



function sudo_roles {

    if [ "$mode" = "except" ] ; then

        # REMOVE except ROLE # ---------------------------------------------------------------------------------------------------------------------------- #
        echo -e "dn: cn=except,ou=SUDOers,$dc" > except.ldif
        echo -e "changetype: delete"          >> except.ldif
        ldapmodify -x -D cn=$openldap_admin_user,$dc -w "$openldap_admin_pass" -H ldap://$openldap_domain -f except.ldif
        # ------------------------------------------------------------------------------------------------------------------------------------------------- #

        # CREATE LDIF FILE # ------------------------------------------------------------------------------------------------------------------------------ #
        echo -e "dn: cn=except,ou=SUDOers,$dc" > except.ldif
        echo -e "objectClass: top"            >> except.ldif
        echo -e "objectClass: sudoRole"       >> except.ldif
        echo -e "cn: except"                  >> except.ldif
        echo -e "sudoHost: ALL"               >> except.ldif
        echo -e "sudoRunAsUser: ALL"          >> except.ldif
        # ------------------------------------------------------------------------------------------------------------------------------------------------- #
 
        # CREATE LDIF FILE # ------------------------------------------------------------------------------------------------------------------------------ #
        for command in $(cat except.list) ; do
            echo -e "sudoCommand: $command" >> except.ldif
        done
        # ------------------------------------------------------------------------------------------------------------------------------------------------- #

        # FIND AND CREATE SUDO ORDER NUMBER # ------------------------------------------------------------------------------------------------------------- #
        sudoOrder=$(slapcat | grep -i sudoOrder | cut -d ' ' -f 2)
        [ -z "$sudoOrder" ] && sudoOrder='3' || sudoOrder=$(echo "$sudoOrder + 1" | bc)
        # ------------------------------------------------------------------------------------------------------------------------------------------------- #

        # CREATE LDIF FILE # ------------------------------------------------------------------------------------------------------------------------------ #
        echo -e "sudoOrder: $sudoOrder" >> except.ldif
        # ------------------------------------------------------------------------------------------------------------------------------------------------- #

        # LOAD LDIF FILE IN OPENLDAP # -------------------------------------------------------------------------------------------------------------------- #
        ldapadd -f except.ldif -H ldap://$openldap_domain -D cn=$openldap_admin_user,$dc -w "$openldap_admin_pass" -x
        # ------------------------------------------------------------------------------------------------------------------------------------------------- #

        # REMOVE OLD FILES # ------------------------------------------------------------------------------------------------------------------------------ #
        rm -rf except.ldif &> /dev/null
        # ------------------------------------------------------------------------------------------------------------------------------------------------- #

    elif [ "$mode" = "access" ] ; then

        # REMOVE access ROLE # ---------------------------------------------------------------------------------------------------------------------------- #
        echo -e "dn: cn=access,ou=SUDOers,$dc" > access.ldif
        echo -e "changetype: delete"          >> access.ldif
        ldapmodify -x -D cn=$openldap_admin_user,$dc -w "$openldap_admin_pass" -H ldap://$openldap_domain -f access.ldif
        # ------------------------------------------------------------------------------------------------------------------------------------------------- #

        # CREATE LDIF FILE # ------------------------------------------------------------------------------------------------------------------------------ #
        echo -e "dn: cn=access,ou=SUDOers,$dc" > access.ldif
        echo -e "objectClass: top"            >> access.ldif
        echo -e "objectClass: sudoRole"       >> access.ldif
        echo -e "cn: access"                  >> access.ldif
        echo -e "sudoHost: ALL"               >> access.ldif
        echo -e "sudoRunAsUser: ALL"          >> access.ldif
        echo -e "sudoCommand: ALL"            >> access.ldif
        # ------------------------------------------------------------------------------------------------------------------------------------------------- #

        # CREATE LDIF FILE # ------------------------------------------------------------------------------------------------------------------------------ #
        for command in $(cat access.list) ; do
            echo -e "sudoCommand: !$command" >> access.ldif
        done
        # ------------------------------------------------------------------------------------------------------------------------------------------------- #

        # FIND AND CREATE SUDO ORDER NUMBER # ------------------------------------------------------------------------------------------------------------- #
        sudoOrder=$(slapcat | grep -i sudoOrder | cut -d ' ' -f 2)
        [ -z "$sudoOrder" ] && sudoOrder='3' || sudoOrder=$(echo "$sudoOrder + 1" | bc)
        # ------------------------------------------------------------------------------------------------------------------------------------------------- #

        # CREATE LDIF FILE # ------------------------------------------------------------------------------------------------------------------------------ #
        echo -e "sudoOrder: $sudoOrder" >> access.ldif
        # ------------------------------------------------------------------------------------------------------------------------------------------------- #

        # LOAD LDIF FILE IN OPENLDAP # -------------------------------------------------------------------------------------------------------------------- #
        ldapadd -f access.ldif -H ldap://$openldap_domain -D cn=$openldap_admin_user,$dc -w "$openldap_admin_pass" -x
        # ------------------------------------------------------------------------------------------------------------------------------------------------- #

        # REMOVE OLD FILES # ------------------------------------------------------------------------------------------------------------------------------ #
        rm -rf access.ldif &> /dev/null
        # ------------------------------------------------------------------------------------------------------------------------------------------------- #

    fi
}



function remove_sudo_roles {

    # FIND DISTINGUISHED NAME # --------------------------------------------------------------------------------------------------------------------------- #
    dn=$(slapcat | grep "except\|access" | grep "dn:")
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #


    for (( i=1 ; i <= "$(echo "$dn" | wc -l)" ; i++ )) ; do

        line=$(echo "$dn" | head -n $i | tail -n 1)

        # REMOVE access ROLE # ---------------------------------------------------------------------------------------------------------------------------- #
        echo -e "$line"                          > access.ldif
        echo -e "changetype: delete"            >> access.ldif
        ldapmodify -x -D cn=$openldap_admin_user,$dc -w "$openldap_admin_pass" -H ldap://$openldap_domain -f access.ldif
        # ------------------------------------------------------------------------------------------------------------------------------------------------- #

    done

    # REMOVE OLD LDIF FILE # ------------------------------------------------------------------------------------------------------------------------------ #
    rm -rf access.ldif &> /dev/null
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

}



if [ "$1" = "create_group" ] ; then

    # RUN check_slapd_package FUNCTION # ------------------------------------------------------------------------------------------------------------------ #
    check_slapd_package
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    # CHECK $2 IS EMPTY OR NOT # -------------------------------------------------------------------------------------------------------------------------- #
    [ -z "$2" ] && echo "[-] Please enter group name" && usage && exit 1
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    # CREATE VARIABLES # ---------------------------------------------------------------------------------------------------------------------------------- #
    group_name="$2"
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    # RUN load_dc FUNCTION # ------------------------------------------------------------------------------------------------------------------------------ #
    load_dc
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    # RUN create_group FUNCTION # ------------------------------------------------------------------------------------------------------------------------- #
    create_group
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    exit 0

elif [ "$1" = "delete_group" ] ; then

    # RUN check_slapd_package FUNCTION # ------------------------------------------------------------------------------------------------------------------ #
    check_slapd_package
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    # CHECK $2 IS EMPTY OR NOT # -------------------------------------------------------------------------------------------------------------------------- #
    [ -z "$2" ] && echo "[-] Please enter group name" && usage && exit 1
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    # CREATE VARIABLES # ---------------------------------------------------------------------------------------------------------------------------------- #
    group_name="$2"
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    # RUN load_dc FUNCTION # ------------------------------------------------------------------------------------------------------------------------------ #
    load_dc
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    # RUN create_group FUNCTION # ------------------------------------------------------------------------------------------------------------------------- #
    delete_group
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    exit 0

elif [ "$1" = "create_user" ] ; then

    # RUN check_slapd_package FUNCTION # ------------------------------------------------------------------------------------------------------------------ #
    check_slapd_package
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    # CHECK $2 IS EMPTY OR NOT # -------------------------------------------------------------------------------------------------------------------------- #
    [ -z "$2" ] && echo "[-] Please enter username" && usage && exit 1
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    # CHECK $3 IS EMPTY OR NOT # -------------------------------------------------------------------------------------------------------------------------- #
    [ -z "$3" ] && echo "[-] Please enter username password" && usage && exit 1
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    # CHECK $4 IS EMPTY OR NOT # -------------------------------------------------------------------------------------------------------------------------- #
    [ -z "$4" ] && echo "[-] Please enter group name" && usage && exit 1
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    # CREATE VARIABLES # ---------------------------------------------------------------------------------------------------------------------------------- #
    user_name="$2"
    user_password="$3"
    group_name="$4"
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    # RUN load_dc FUNCTION # ------------------------------------------------------------------------------------------------------------------------------ #
    load_dc
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    # RUN create_user FUNCTION # -------------------------------------------------------------------------------------------------------------------------- #
    create_user
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    exit 0

elif [ "$1" = "delete_user" ] ; then

    # RUN check_slapd_package FUNCTION # ------------------------------------------------------------------------------------------------------------------ #
    check_slapd_package
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    # CHECK $2 IS EMPTY OR NOT # -------------------------------------------------------------------------------------------------------------------------- #
    [ -z "$2" ] && echo "[-] Please enter username" && usage && exit 1
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    # CREATE VARIABLES # ---------------------------------------------------------------------------------------------------------------------------------- #
    user_name="$2"
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    # RUN load_dc FUNCTION # ------------------------------------------------------------------------------------------------------------------------------ #
    load_dc
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    # RUN create_user FUNCTION # -------------------------------------------------------------------------------------------------------------------------- #
    delete_user
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    exit 0

elif [ "$1" = "enable_sudo" ] ; then

    # RUN check_slapd_package FUNCTION # ------------------------------------------------------------------------------------------------------------------ #
    check_slapd_package
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    # CHECK $2 IS EMPTY OR NOT # -------------------------------------------------------------------------------------------------------------------------- #
    [ -z "$2" ] && echo "[-] Please enter username" && usage && exit 1
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    # CREATE VARIABLES # ---------------------------------------------------------------------------------------------------------------------------------- #
    mode="$2"
    user_name="$3"
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    # RUN load_dc FUNCTION # ------------------------------------------------------------------------------------------------------------------------------ #
    load_dc
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    # DISABLE SUDO ROLES FOR USER # ----------------------------------------------------------------------------------------------------------------------- #
    for mode in access except ; do
        disable_sudo
    done
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    # RUN enable_sudo FUNCTION # -------------------------------------------------------------------------------------------------------------------------- #
    mode="$2"
    enable_sudo
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    exit 0

elif [ "$1" = "disable_sudo" ] ; then

    # RUN check_slapd_package FUNCTION # ------------------------------------------------------------------------------------------------------------------ #
    check_slapd_package
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    # CHECK $2 IS EMPTY OR NOT # -------------------------------------------------------------------------------------------------------------------------- #
    [ -z "$2" ] && echo "[-] Please enter username" && usage && exit 1
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    # CREATE VARIABLES # ---------------------------------------------------------------------------------------------------------------------------------- #
    mode="$2"
    user_name="$3"
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    # RUN load_dc FUNCTION # ------------------------------------------------------------------------------------------------------------------------------ #
    load_dc
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    # RUN disable_sudo FUNCTION # ------------------------------------------------------------------------------------------------------------------------- #
    disable_sudo
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    exit 0

elif [ "$1" = "sudo_roles" ] ; then

    # RUN check_slapd_package FUNCTION # ------------------------------------------------------------------------------------------------------------------ #
    check_slapd_package
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    # CHECK $2 IS EMPTY OR NOT # -------------------------------------------------------------------------------------------------------------------------- #
    [ -z "$2" ] && echo "[-] Please enter mode name" && usage && exit 1
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    # CHECK $3 IS EMPTY OR NOT # -------------------------------------------------------------------------------------------------------------------------- #
    [ -z "$3" ] && echo "[-] Please enter command or command file" && usage && exit 1
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    # CHECK $2 VARIABLE # --------------------------------------------------------------------------------------------------------------------------------- #
    if [ "$2" = "except" ] ; then
        mode='except'
    elif [ "$2" = "access" ] ; then
        mode='access'
    fi
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    # PUT ALL $3 VALUES TO COMMANDS VARIABLES # ----------------------------------------------------------------------------------------------------------- #
    commands="$3"
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    # RUN load_dc FUNCTION # ------------------------------------------------------------------------------------------------------------------------------ #
    load_dc
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    # RUN sudo_roles FUNCTION # --------------------------------------------------------------------------------------------------------------------------- #
    sudo_roles
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    exit 0

elif [ "$1" = "list_user" ] ; then

    # RUN check_slapd_package FUNCTION # ------------------------------------------------------------------------------------------------------------------ #
    check_slapd_package
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    # LOAD list_user FUNCTION # --------------------------------------------------------------------------------------------------------------------------- #
    list_user
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    exit 0

elif [ "$1" = "list_group" ] ; then

    # RUN check_slapd_package FUNCTION # ------------------------------------------------------------------------------------------------------------------ #
    check_slapd_package
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    # LOAD list_group FUNCTION # -------------------------------------------------------------------------------------------------------------------------- #
    list_group
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    exit 0

elif [ "$1" = "remove_sudo_roles" ] ; then

    # RUN check_slapd_package FUNCTION # ------------------------------------------------------------------------------------------------------------------ #
    check_slapd_package
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    # RUN load_dc FUNCTION # ------------------------------------------------------------------------------------------------------------------------------ #
    load_dc
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    # RUN remove_sudo_roles FUNCTION # -------------------------------------------------------------------------------------------------------------------- #
    remove_sudo_roles
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    exit 0

elif [ "$1" = "install" ] ; then

    # CLEAN UP TERMINAL # --------------------------------------------------------------------------------------------------------------------------------- #
    clear
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

elif [ "$1" = "docker-build" ] ; then

    docker-build

    exit 0

else

    # RUN usage FUNCTION # -------------------------------------------------------------------------------------------------------------------------------- #
    usage
    # ----------------------------------------------------------------------------------------------------------------------------------------------------- #

    exit 1

fi



# RUN load_dc FUNCTION # ---------------------------------------------------------------------------------------------------------------------------------- #
load_dc
# --------------------------------------------------------------------------------------------------------------------------------------------------------- #


# CHANGE SYSTEM HOSTNAME # -------------------------------------------------------------------------------------------------------------------------------- #
echo "$openldap_domain" > /etc/hostname
# --------------------------------------------------------------------------------------------------------------------------------------------------------- #


# CONFIGURE hosts FILE # ---------------------------------------------------------------------------------------------------------------------------------- #
grep "$openldap_ip_address $openldap_domain" /etc/hosts &> /dev/null
if [ "$?" != "0" ] ; then
    echo "$openldap_ip_address $openldap_domain" >> /etc/hosts
fi
# --------------------------------------------------------------------------------------------------------------------------------------------------------- #


# UPDATE PACKAGES # --------------------------------------------------------------------------------------------------------------------------------------- #
apt-get update
# --------------------------------------------------------------------------------------------------------------------------------------------------------- #


# UPGRADE PACKAGES # -------------------------------------------------------------------------------------------------------------------------------------- #
apt-get -y dist-upgrade
# --------------------------------------------------------------------------------------------------------------------------------------------------------- #


# REMOVE UNNECESSARY PACKAGE # ---------------------------------------------------------------------------------------------------------------------------- #
apt autoremove -y
# --------------------------------------------------------------------------------------------------------------------------------------------------------- #


# INSTALL OPENLDAP PACKAGES # ----------------------------------------------------------------------------------------------------------------------------- #
apt-get -y install slapd ldap-utils bc curl bsdmainutils libnet-ldap-perl libauthen-sasl-perl perl-doc
# --------------------------------------------------------------------------------------------------------------------------------------------------------- #


# RECONFIGURE OPENLDAP PACKAGE # -------------------------------------------------------------------------------------------------------------------------- #
dpkg-reconfigure slapd
# --------------------------------------------------------------------------------------------------------------------------------------------------------- #


# CLEAN UP TERMINAL # ------------------------------------------------------------------------------------------------------------------------------------- #
clear
# --------------------------------------------------------------------------------------------------------------------------------------------------------- #


# PRINT MSG IN TERMINAL # --------------------------------------------------------------------------------------------------------------------------------- #
echo -e "[>] WE CREATE PEOPLE ORGANIZATION UNIT IN $dc"
echo -e "[>] WE CREATE GROUPS ORGANIZATION UNIT IN $dc"
# --------------------------------------------------------------------------------------------------------------------------------------------------------- #


# DELAY TIME # -------------------------------------------------------------------------------------------------------------------------------------------- #
sleep 5
# --------------------------------------------------------------------------------------------------------------------------------------------------------- #


# CREATE DEFAULT ORGANIZATION UNIT # ---------------------------------------------------------------------------------------------------------------------- #
cat << EOF > organizationalUnit.ldif
dn: ou=people,$dc
objectClass: organizationalUnit
ou: people

dn: ou=groups,$dc
objectClass: organizationalUnit
ou: groups
EOF
ldapadd -x -D cn=$openldap_admin_user,$dc -w "$openldap_admin_pass" -f organizationalUnit.ldif
rm -rf organizationalUnit.ldif &> /dev/null
# --------------------------------------------------------------------------------------------------------------------------------------------------------- #


# CREATE SUDO ORGANIZATION UNIT # ------------------------------------------------------------------------------------------------------------------------- #
cat << EOF > sudo_ou.ldif
dn: ou=SUDOers,$dc
objectClass: top
objectClass: organizationalUnit
ou: SUDOers
description: Laboratory SUDOers Container
EOF
ldapadd -f sudo_ou.ldif -H ldap://$openldap_domain -D cn=admin,$dc -w "$openldap_admin_pass" -x
rm -rf sudo_ou.ldif &> /dev/null
# --------------------------------------------------------------------------------------------------------------------------------------------------------- #


# CREATE SUDOERS VARIABLE # ------------------------------------------------------------------------------------------------------------------------------- #
SUDOERS_BASE=ou=SUDOers,$dc
export SUDOERS_BASE
# --------------------------------------------------------------------------------------------------------------------------------------------------------- #


# CONVERT /etc/sudoers TO INPUT FILE FOR OPENLDAP # ------------------------------------------------------------------------------------------------------- #
# cvtsudoers -f ldif -o sudoers.ldif /etc/sudoers
# --------------------------------------------------------------------------------------------------------------------------------------------------------- #


# CREATE SUDO Attributes IN OPENLDAP # -------------------------------------------------------------------------------------------------------------------- #
cat << EOF > sudoers.ldif
dn: cn=sudoers,cn=schema,cn=config
objectClass: olcSchemaConfig
cn: sudoers
olcAttributeTypes: {0}( 1.3.6.1.4.1.15953.9.1.1 NAME 'sudoUser' DESC 'User(s) who may run sudo' EQUALITY caseExactIA5Match SUBSTR caseExactIA5SubstringsMatch SYNTAX 1.3.6.1.4.1.1466.115.121.1.26 )
olcAttributeTypes: {1}( 1.3.6.1.4.1.15953.9.1.2 NAME 'sudoHost' DESC 'Host(s) who may run sudo' EQUALITY caseExactIA5Match SUBSTR caseExactIA5SubstringsMatch SYNTAX 1.3.6.1.4.1.1466.115.121.1.26 )
olcAttributeTypes: {2}( 1.3.6.1.4.1.15953.9.1.3 NAME 'sudoCommand' DESC 'Command(s) to be executed by sudo' EQUALITY caseExactIA5Match SYNTAX 1.3.6.1.4.1.1466.115.121.1.26 )
olcAttributeTypes: {3}( 1.3.6.1.4.1.15953.9.1.4 NAME 'sudoRunAs' DESC 'User(s) impersonated by sudo (deprecated)' EQUALITY caseExactIA5Match SYNTAX 1.3.6.1.4.1.1466.115.121.1.26 )
olcAttributeTypes: {4}( 1.3.6.1.4.1.15953.9.1.5 NAME 'sudoOption' DESC 'Options(s) followed by sudo' EQUALITY caseExactIA5Match SYNTAX 1.3.6.1.4.1.1466.115.121.1.26 )
olcAttributeTypes: {5}( 1.3.6.1.4.1.15953.9.1.6 NAME 'sudoRunAsUser' DESC 'User(s) impersonated by sudo' EQUALITY caseExactIA5Match SYNTAX 1.3.6.1.4.1.1466.115.121.1.26 )
olcAttributeTypes: {6}( 1.3.6.1.4.1.15953.9.1.7 NAME 'sudoRunAsGroup' DESC 'Group(s) impersonated by sudo' EQUALITY caseExactIA5Match SYNTAX 1.3.6.1.4.1.1466.115.121.1.26 )
olcAttributeTypes: {7}( 1.3.6.1.4.1.15953.9.1.8 NAME 'sudoNotBefore' DESC 'Start of time interval for which the entry is valid' EQUALITY generalizedTimeMatch ORDERING generalizedTimeOrderingMatch SYNTAX 1.3.6.1.4.1.1466.115.121.1.24 )
olcAttributeTypes: {8}( 1.3.6.1.4.1.15953.9.1.9 NAME 'sudoNotAfter' DESC 'End of time interval for which the entry is valid' EQUALITY generalizedTimeMatch ORDERING generalizedTimeOrderingMatch SYNTAX 1.3.6.1.4.1.1466.115.121.1.24 )
olcAttributeTypes: {9}( 1.3.6.1.4.1.15953.9.1.10 NAME 'sudoOrder' DESC 'an integer to order the sudoRole entries' EQUALITY integerMatch ORDERING integerOrderingMatch SYNTAX 1.3.6.1.4.1.1466.115.121.1.27 )
olcObjectClasses: {0}( 1.3.6.1.4.1.15953.9.2.1 NAME 'sudoRole' DESC 'SudoerEntries' SUP top STRUCTURAL MUST cn MAY ( sudoUser $ sudoHost $ sudoCommand$ sudoRunAs $ sudoRunAsUser $ sudoRunAsGroup $ sudoOption $ sudoOrder $ sudoNotBefore $ sudoNotAfter $ description ) )
EOF
ldapadd -Y EXTERNAL -H ldapi:/// -f sudoers.ldif
rm -rf sudoers.ldif &> /dev/null
# --------------------------------------------------------------------------------------------------------------------------------------------------------- #
